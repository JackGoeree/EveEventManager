@page "/events"
@rendermode InteractiveServer

@using MudBlazor
@using EveFrontend.Models
@using EveFrontend.Services

@inject AuthService AuthService
@inject EventService EventService
@inject UserState UserState
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider /> 
<MudSnackbarProvider />


<h3>Events</h3>

@code {
    private List<Event> events = new();

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEvents();
    }
}

<MudTable Items="events" Dense="true" Hover="true" Bordered="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Max Attendees</MudTh>
        <MudTh>Attendees</MudTh>
        <MudTh>RSVP</MudTh>
        <MudTh>Edit</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd> 
            @if (editingEvent == context)
            {
                <MudTextField @bind-Value="context.Name" />
            }
            else
            {
                @context.Name
            }
        </MudTd>
        <MudTd>
            @if (editingEvent == context)
            {
                <MudTextField Label="Description" 
                @bind-Value="context.Description" 
                FullWidth="true" 
                Lines="5"  />
            }
            else
            {
                @context.Description
            }
        </MudTd>
        <MudTd>
            @if (editingEvent == context)
            {
                <MudDatePicker Date="context.Date" DateChanged="@(args => context.Date = args.Value)" />
            }
            else
            {
                @context.Date.ToString("yyyy-MM-dd")
            }
        </MudTd>
        <MudTd>
            @if (editingEvent == context)
            {
                <MudTextField @bind-Value="context.Location" />
            }
            else
            {
                @context.Location
            }
        </MudTd>
        <MudTd>
            @if (editingEvent == context)
            {
                <MudNumericField @bind-Value="context.MaxAttendees" />
            }
            else
            {
                @context.MaxAttendees
            }
        </MudTd>
        <MudTd>
            @if (context.Attendees?.Count > 0)
            {
                <MudTooltip Text="View Attendees">
                    <MudIconButton Icon="@Icons.Material.Filled.People" Color="Color.Primary" OnClick="() => ViewAttendees(context)"/>
                </MudTooltip>
            }
        </MudTd>
        <MudTd>
            <MudTooltip 
                Disabled="@(!(context.Attendees != null && context.Attendees.Contains(UserState?.Email)) && UserState.IsLoggedIn)"
                Text="@(context.Attendees != null && context.Attendees.Contains(UserState?.Email) 
                ? "You are already attending this event" 
                : !UserState.IsLoggedIn 
                ? "You must be logged in to RSVP" 
                : "")">
                <MudButton 
                Disabled="@(!UserState.IsLoggedIn || (context.Attendees != null && context.Attendees.Contains(UserState?.Email)))"
                Color="Color.Primary" Variant="Variant.Text" OnClick="() => RSVP(context)">
                    RSVP
                </MudButton>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudTooltip 
            Disabled="@(UserState.IsLoggedIn)"
            Text="You must be logged in to edit">
            <MudButton Disabled="@(!UserState.IsLoggedIn)" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Text" OnClick="() => ToggleEdit(context)">
                 @(editingEvent == context ? "Save" : "Edit")
            </MudButton>
            </MudTooltip>
        </MudTd>
        <MudTd>
            <MudTooltip 
            Disabled="@(UserState.IsLoggedIn)"
            Text="You must be logged in to delete">
            <MudButton Disabled="@(!UserState.IsLoggedIn)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Text" OnClick="() => DeleteEvent(context)">
                Delete
            </MudButton>
            </MudTooltip>
        </MudTd>
    </RowTemplate>
</MudTable>
<br><br>

@code {

    private Event? editingEvent;

     private async void ToggleEdit(Event eventToEdit)
    {
        if (editingEvent == eventToEdit)
        {
            await EventService.UpdateEvent(eventToEdit.Id, eventToEdit);
            editingEvent = null;
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            editingEvent = eventToEdit;
        }
    }

    private async void DeleteEvent(Event eventToDelete)
    {
        await EventService.DeleteEvent(eventToDelete.Id);
        events.Remove(eventToDelete);
        await InvokeAsync(StateHasChanged);
        Console.WriteLine($"Deleting event: {eventToDelete.Name}");
    }

    private Task ViewAttendees(Event eventToView)
    {
         var options = new DialogOptions { CloseOnEscapeKey = true };

         var parameters = new DialogParameters
            {
                { "Attendees", eventToView.Attendees } 
            };

        return DialogService.ShowAsync<AttendeesDialog>("Attendees", parameters, options);
    }

    private async Task RSVP(Event eventToRSVP)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialog = await DialogService.ShowAsync<RSVPDialog>("RSVP", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await EventService.RSVPToEvent(eventToRSVP.Id, UserState.Email);
        }
        StateHasChanged();
        Snackbar.Add("Success! You are now attending this event.", Severity.Success);
    }
}

<h2>Create Event</h2>

<EditForm Model="@EventModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" placeholder="Enter a name for this event..." @bind-Value="EventModel.Name" />
        <ValidationMessage For="@(() => EventModel.Name)" />
    </div>

    <div class="mb-3">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" placeholder="Enter a description for this event..." @bind-Value="EventModel.Description" />
        <ValidationMessage For="@(() => EventModel.Description)" />
    </div>

    <div class="mb-3">
        <label for="date">Date</label>
        <InputDate id="date" TValue="DateTime" class="form-control" @bind-Value="EventModel.Date" />
        <ValidationMessage For="@(() => EventModel.Date)" />
    </div>

    <div class="mb-3">
        <label for="location">Location</label>
        <InputText id="location" class="form-control" placeholder="Enter a location for this event..." @bind-Value="EventModel.Location" />
        <ValidationMessage For="@(() => EventModel.Location)" />
    </div>

    <div class="mb-3">
        <label for="maxAttendees">Max Attendees</label>
        <InputNumber id="maxAttendees" TValue="int" class="form-control" @bind-Value="EventModel.MaxAttendees" />
        <ValidationMessage For="@(() => EventModel.MaxAttendees)" />
    </div>

    <ValidationSummary />
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>


@code {
    private Event EventModel { get; set; } = new Event();

    private async void HandleValidSubmit()
    {
        EventModel.Attendees = [];
    
        Console.WriteLine($"Name: {EventModel.Name}");
        Console.WriteLine($"Description: {EventModel.Description}");
        Console.WriteLine($"Date: {EventModel.Date}");
        Console.WriteLine($"Location: {EventModel.Location}");
        Console.WriteLine($"Max Attendees: {EventModel.MaxAttendees}");
        Event newEvent = await EventService.CreateEvent(EventModel);
        events.Add(newEvent);
        await InvokeAsync(StateHasChanged);
    }
}
