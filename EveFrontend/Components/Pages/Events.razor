@page "/events"
@rendermode InteractiveServer
@using EveFrontend.Models
@using EveFrontend.Services
@inject AuthService AuthService
@inject EventService EventService
@inject NavigationManager Navigation
@using MudBlazor

<h3>Events</h3>

@code {
    private List<Event> events;

    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetEvents();
    }
}

<MudTable Items="events" Dense="true" Hover="true" Bordered="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Location</MudTh>
        <MudTh>Max Attendees</MudTh>
        <MudTh>Attendees</MudTh>
        <MudTh>Edit</MudTh>
        <MudTh>Delete</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Description</MudTd>
        <MudTd>@context.Date.ToString("yyyy-MM-dd")</MudTd>
        <MudTd>@context.Location</MudTd>
        <MudTd>@context.MaxAttendees</MudTd>
        <MudTd>
            @if (context.Attendees?.Count > 0)
            {
                <MudTooltip Text="View Attendees">
                    <MudIconButton Icon="@Icons.Material.Filled.People" Color="Color.Primary" />
                </MudTooltip>
            }
        </MudTd>
        <MudTd>
            <MudButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Variant="Variant.Text">
                Edit
            </MudButton>
        </MudTd>
        <MudTd>
            <MudButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Text">
                Delete
            </MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>
<br><br>

@code {
    private void EditEvent(Event eventToEdit)
    {
        // Navigate to an edit page or open a dialog
        Console.WriteLine($"Editing event: {eventToEdit.Name}");
    }

    private void DeleteEvent(Event eventToDelete)
    {
        // Add confirmation and delete logic
        Console.WriteLine($"Deleting event: {eventToDelete.Name}");
    }

    private void ViewAttendees(Event eventToView)
    {
        // Logic for displaying attendees
        Console.WriteLine($"Viewing attendees for: {eventToView.Name}");
    }
}

<h2>Create Event</h2>

<EditForm Model="@EventModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="EventModel.Name" />
    </div>

    <div class="mb-3">
        <label for="description">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="EventModel.Description" />
    </div>

    <div class="mb-3">
        <label for="date">Date</label>
        <InputDate id="date" TValue="DateTime" class="form-control" @bind-Value="EventModel.Date" />
    </div>

    <div class="mb-3">
        <label for="location">Location</label>
        <InputText id="location" class="form-control" @bind-Value="EventModel.Location" />
    </div>

    <div class="mb-3">
        <label for="maxAttendees">Max Attendees</label>
        <InputNumber id="maxAttendees" TValue="int" class="form-control" @bind-Value="EventModel.MaxAttendees" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
    private Event EventModel = new Event();

    private async void HandleValidSubmit()
    {
        Console.WriteLine($"Name: {EventModel.Name}");
        Console.WriteLine($"Description: {EventModel.Description}");
        Console.WriteLine($"Date: {EventModel.Date}");
        Console.WriteLine($"Location: {EventModel.Location}");
        Console.WriteLine($"Max Attendees: {EventModel.MaxAttendees}");
        EventModel.Attendees = [];

        await EventService.CreateEvent(EventModel);
        events = await EventService.GetEvents();
    }
}

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider /> 
<MudSnackbarProvider />